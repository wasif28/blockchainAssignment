/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CounterInterface extends Interface {
  getFunction(
    nameOrSignature: "addWord" | "getWordCount" | "getWords"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "WordAdded"): EventFragment;

  encodeFunctionData(functionFragment: "addWord", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getWordCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWords",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addWord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWordCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWords", data: BytesLike): Result;
}

export namespace WordAddedEvent {
  export type InputTuple = [word: string];
  export type OutputTuple = [word: string];
  export interface OutputObject {
    word: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Counter extends BaseContract {
  connect(runner?: ContractRunner | null): Counter;
  waitForDeployment(): Promise<this>;

  interface: CounterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addWord: TypedContractMethod<[word: string], [void], "nonpayable">;

  getWordCount: TypedContractMethod<[], [bigint], "view">;

  getWords: TypedContractMethod<
    [startIndex: BigNumberish, endIndex: BigNumberish],
    [string[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addWord"
  ): TypedContractMethod<[word: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getWordCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWords"
  ): TypedContractMethod<
    [startIndex: BigNumberish, endIndex: BigNumberish],
    [string[]],
    "view"
  >;

  getEvent(
    key: "WordAdded"
  ): TypedContractEvent<
    WordAddedEvent.InputTuple,
    WordAddedEvent.OutputTuple,
    WordAddedEvent.OutputObject
  >;

  filters: {
    "WordAdded(string)": TypedContractEvent<
      WordAddedEvent.InputTuple,
      WordAddedEvent.OutputTuple,
      WordAddedEvent.OutputObject
    >;
    WordAdded: TypedContractEvent<
      WordAddedEvent.InputTuple,
      WordAddedEvent.OutputTuple,
      WordAddedEvent.OutputObject
    >;
  };
}
